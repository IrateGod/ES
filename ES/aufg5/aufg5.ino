#include <SPI.h>

int reset_pin = 9;
int sce_pin = 10;
int dc_pin = 3;
int freq = 1000000;
uint8_t display[48][84];
unsigned char font[95][6] = {
  { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 }, // space
  { 0x00, 0x00, 0x5F, 0x00, 0x00, 0x00 }, // !
  { 0x00, 0x07, 0x00, 0x07, 0x00, 0x00 }, // "
  { 0x14, 0x7F, 0x14, 0x7F, 0x14, 0x00 }, // #
  { 0x24, 0x2A, 0x7F, 0x2A, 0x12, 0x00 }, // $
  { 0x23, 0x13, 0x08, 0x64, 0x62, 0x00 }, // %
  { 0x36, 0x49, 0x55, 0x22, 0x50, 0x00 }, // &
  { 0x00, 0x00, 0x07, 0x00, 0x00, 0x00 }, // '
  { 0x00, 0x1C, 0x22, 0x41, 0x00, 0x00 }, // (
  { 0x00, 0x41, 0x22, 0x1C, 0x00, 0x00 }, // )
  { 0x0A, 0x04, 0x1F, 0x04, 0x0A, 0x00 }, // *
  { 0x08, 0x08, 0x3E, 0x08, 0x08, 0x00 }, // +
  { 0x00, 0x50, 0x30, 0x00, 0x00, 0x00 }, // ,
  { 0x08, 0x08, 0x08, 0x08, 0x08, 0x00 }, // -
  { 0x00, 0x60, 0x60, 0x00, 0x00, 0x00 }, // .
  { 0x20, 0x10, 0x08, 0x04, 0x02, 0x00 }, // slash
  { 0x3E, 0x51, 0x49, 0x45, 0x3E, 0x00 }, // 0
  { 0x00, 0x42, 0x7F, 0x40, 0x00, 0x00 }, // 1
  { 0x42, 0x61, 0x51, 0x49, 0x46, 0x00 }, // 2
  { 0x21, 0x41, 0x45, 0x4B, 0x31, 0x00 }, // 3
  { 0x18, 0x14, 0x12, 0x7F, 0x10, 0x00 }, // 4
  { 0x27, 0x45, 0x45, 0x45, 0x39, 0x00 }, // 5
  { 0x3C, 0x4A, 0x49, 0x49, 0x30, 0x00 }, // 6
  { 0x03, 0x71, 0x09, 0x05, 0x03, 0x00 }, // 7
  { 0x36, 0x49, 0x49, 0x49, 0x36, 0x00 }, // 8
  { 0x06, 0x49, 0x49, 0x29, 0x1E, 0x00 }, // 9
  { 0x00, 0x36, 0x36, 0x00, 0x00, 0x00 }, // :
  { 0x00, 0x56, 0x36, 0x00, 0x00, 0x00 }, // ;
  { 0x08, 0x14, 0x22, 0x41, 0x00, 0x00 }, // <
  { 0x14, 0x14, 0x14, 0x14, 0x14, 0x00 }, // =
  { 0x00, 0x41, 0x22, 0x14, 0x08, 0x00 }, // >
  { 0x02, 0x01, 0x51, 0x09, 0x06, 0x00 }, // ?
  { 0x32, 0x49, 0x79, 0x41, 0x3E, 0x00 }, // @
  { 0x7E, 0x11, 0x11, 0x11, 0x7E, 0x00 }, // A
  { 0x7F, 0x49, 0x49, 0x49, 0x36, 0x00 }, // B
  { 0x3E, 0x41, 0x41, 0x41, 0x22, 0x00 }, // C
  { 0x7F, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // D
  { 0x7F, 0x49, 0x49, 0x49, 0x41, 0x00 }, // E
  { 0x7F, 0x09, 0x09, 0x09, 0x01, 0x00 }, // F
  { 0x3E, 0x41, 0x41, 0x49, 0x7A, 0x00 }, // G
  { 0x7F, 0x08, 0x08, 0x08, 0x7F, 0x00 }, // H
  { 0x00, 0x41, 0x7F, 0x41, 0x00, 0x00 }, // I
  { 0x20, 0x40, 0x41, 0x3F, 0x01, 0x00 }, // J
  { 0x7F, 0x08, 0x14, 0x22, 0x41, 0x00 }, // K
  { 0x7F, 0x40, 0x40, 0x40, 0x40, 0x00 }, // L
  { 0x7F, 0x02, 0x0C, 0x02, 0x7F, 0x00 }, // M
  { 0x7F, 0x04, 0x08, 0x10, 0x7F, 0x00 }, // N
  { 0x3E, 0x41, 0x41, 0x41, 0x3E, 0x00 }, // O
  { 0x7F, 0x09, 0x09, 0x09, 0x06, 0x00 }, // P
  { 0x3E, 0x41, 0x51, 0x21, 0x5E, 0x00 }, // Q
  { 0x7F, 0x09, 0x19, 0x29, 0x46, 0x00 }, // R
  { 0x26, 0x49, 0x49, 0x49, 0x32, 0x00 }, // S
  { 0x01, 0x01, 0x7F, 0x01, 0x01, 0x00 }, // T
  { 0x3F, 0x40, 0x40, 0x40, 0x3F, 0x00 }, // U
  { 0x1F, 0x20, 0x40, 0x20, 0x1F, 0x00 }, // V
  { 0x3F, 0x40, 0x38, 0x40, 0x3F, 0x00 }, // W
  { 0x63, 0x14, 0x08, 0x14, 0x63, 0x00 }, // X
  { 0x07, 0x08, 0x70, 0x08, 0x07, 0x00 }, // Y
  { 0x61, 0x51, 0x49, 0x45, 0x43, 0x00 }, // Z
  { 0x00, 0x7F, 0x41, 0x41, 0x00, 0x00 }, // [
  { 0x02, 0x04, 0x08, 0x10, 0x20, 0x00 }, // backslash
  { 0x00, 0x41, 0x41, 0x7F, 0x00, 0x00 }, // ]
  { 0x04, 0x02, 0x01, 0x02, 0x04, 0x00 }, // ^
  { 0x40, 0x40, 0x40, 0x40, 0x40, 0x00 }, // _
  { 0x00, 0x01, 0x02, 0x04, 0x00, 0x00 }, // `
  { 0x20, 0x54, 0x54, 0x54, 0x78, 0x00 }, // a
  { 0x7F, 0x48, 0x44, 0x44, 0x38, 0x00 }, // b
  { 0x38, 0x44, 0x44, 0x44, 0x20, 0x00 }, // c
  { 0x38, 0x44, 0x44, 0x48, 0x7F, 0x00 }, // d
  { 0x38, 0x54, 0x54, 0x54, 0x18, 0x00 }, // e
  { 0x08, 0x7E, 0x09, 0x01, 0x02, 0x00 }, // f
  { 0x08, 0x54, 0x54, 0x54, 0x3C, 0x00 }, // g
  { 0x7F, 0x08, 0x04, 0x04, 0x78, 0x00 }, // h
  { 0x00, 0x48, 0x7D, 0x40, 0x00, 0x00 }, // i
  { 0x20, 0x40, 0x44, 0x3D, 0x00, 0x00 }, // j
  { 0x7F, 0x10, 0x28, 0x44, 0x00, 0x00 }, // k
  { 0x00, 0x41, 0x7F, 0x40, 0x00, 0x00 }, // l
  { 0x7C, 0x04, 0x78, 0x04, 0x78, 0x00 }, // m
  { 0x7C, 0x08, 0x04, 0x04, 0x78, 0x00 }, // n
  { 0x38, 0x44, 0x44, 0x44, 0x38, 0x00 }, // o
  { 0x7C, 0x14, 0x14, 0x14, 0x08, 0x00 }, // p
  { 0x08, 0x14, 0x14, 0x18, 0x7C, 0x00 }, // q
  { 0x7C, 0x08, 0x04, 0x04, 0x08, 0x00 }, // r
  { 0x48, 0x54, 0x54, 0x54, 0x20, 0x00 }, // s
  { 0x04, 0x3F, 0x44, 0x40, 0x20, 0x00 }, // t
  { 0x3C, 0x40, 0x40, 0x20, 0x7C, 0x00 }, // u
  { 0x1C, 0x20, 0x40, 0x20, 0x1C, 0x00 }, // v
  { 0x3C, 0x40, 0x30, 0x40, 0x3C, 0x00 }, // w
  { 0x44, 0x28, 0x10, 0x28, 0x44, 0x00 }, // x
  { 0x0C, 0x50, 0x50, 0x50, 0x3C, 0x00 }, // y
  { 0x44, 0x64, 0x54, 0x4C, 0x44, 0x00 }, // z
  { 0x00, 0x08, 0x36, 0x41, 0x00, 0x00 }, // {
  { 0x00, 0x00, 0x7F, 0x00, 0x00, 0x00 }, // |
  { 0x00, 0x41, 0x36, 0x08, 0x00, 0x00 }, // }
  { 0x10, 0x08, 0x08, 0x10, 0x08, 0x00 } // ~
};

void setup() {
  Serial.begin(115200);
  pinMode(reset_pin, OUTPUT);
  pinMode(dc_pin, OUTPUT);
  digitalWrite(reset_pin, LOW);
  delay(500);
  digitalWrite(reset_pin, HIGH);
  SPI.begin(sce_pin);
  SPI.beginTransaction(sce_pin, SPISettings(freq, MSBFIRST, SPI_MODE0));
  digitalWrite(dc_pin, LOW);
  SPI.transfer(sce_pin, 0x21);
  SPI.transfer(sce_pin, 0x13);
  SPI.transfer(sce_pin, 0xBF);
  SPI.transfer(sce_pin, 0x04);
  SPI.transfer(sce_pin, 0x20);
  SPI.transfer(sce_pin, 0x0C);
  SPI.transfer(sce_pin, 0x40);
  SPI.transfer(sce_pin, 0x80);
  digitalWrite(dc_pin, HIGH);

  setChar(0, 0, 'H');
  setChar(0, 6, 'e');
  setChar(0, 12, 'l');
  setChar(0, 18, 'l');
  setChar(0, 24, 'o');
  setChar(0, 30, ' ');
  setChar(0, 36, 'W');
  setChar(0, 42, 'o');
  setChar(0, 48, 'r');
  setChar(0, 54, 'l');
  setChar(0, 60, 'd');

  setString(8, 0, "Hello World");

  drawDisplay();
  
  SPI.endTransaction();

}

void setPixel(int y, int x, int value)
{
  if (y < 0 || y > 47)
  {
    Serial.print("Argument y out of bounds, expected to be 0 >= y < 48, got: ");
    Serial.println(y);
    return;
  }
  if (x < 0 || x > 83)
  {
    Serial.println("Argument x out of bounds, expected to be 0 >= x < 84, got: ");
    Serial.println(x);
    return;
  }
  if (value == 0)
  {
    display[y][x] = 0;
  }
  else
  {
    display[y][x] = 1;
  }
}

void setChar(int y, int x, char c)
{
  int offset = (int) c - 0x20;
  unsigned char* fontChar = font[offset];

  for (int xAddr = 0; xAddr < 6; xAddr++)
  {
    Serial.println(fontChar[xAddr]);
    setPixel(y, x + xAddr, fontChar[xAddr] & 1);
    setPixel(y + 1, x + xAddr, fontChar[xAddr] & 2);
    setPixel(y + 2, x + xAddr, fontChar[xAddr] & 4);
    setPixel(y + 3, x + xAddr, fontChar[xAddr] & 8);
    setPixel(y + 4, x + xAddr, fontChar[xAddr] & 16);
    setPixel(y + 5, x + xAddr, fontChar[xAddr] & 32);
    setPixel(y + 6, x + xAddr, fontChar[xAddr] & 64);
    setPixel(y + 7, x + xAddr, fontChar[xAddr] & 128);
  }
}

void setString(int y, int x, char *c_str)
{
  int i = 0;
  while (c_str[i++] != 0x00)
  {
    setChar(y, x + ((i - 1) * 6), c_str[i - 1]);
  }
}

void drawDisplay()
{
  uint8_t displayBuffer = 0; 
  SPI.beginTransaction(sce_pin, SPISettings(freq, MSBFIRST, SPI_MODE0));
  digitalWrite(dc_pin, HIGH);
  for (int y = 0; y < 48; y += 8)
  {
    for (int x = 0; x < 84; x++)
    {
      displayBuffer |= display[y][x];
      displayBuffer |= display[y + 1][x]  << 1;
      displayBuffer |= display[y + 2][x] << 2;
      displayBuffer |= display[y + 3][x] << 3;
      displayBuffer |= display[y + 4][x] << 4;
      displayBuffer |= display[y + 5][x] << 5;
      displayBuffer |= display[y + 6][x] << 6;
      displayBuffer |= display[y + 7][x] << 7;
      SPI.transfer(sce_pin, displayBuffer);
      displayBuffer = 0;
    }
  }
  SPI.endTransaction();
}

void loadingDemo()
{
  for (int x = 0; x < 84; x++)
  {
    for (int y = 0; y < 48; y++)
    {
      setPixel(y, x, 1);
    }
    drawDisplay();
    delay(20);
  }

  for (int x = 0; x < 84; x++)
  {
    for (int y = 0; y < 48; y++)
    {
      setPixel(y, x, 0);
    }
    drawDisplay();
    delay(20);
  }
}

void loop() {
  
}
